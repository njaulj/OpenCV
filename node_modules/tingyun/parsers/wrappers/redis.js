'use strict';

var shimmer     = require('../../util/shimmer')
    , logger      = require('../../util/logger').child('parsers.wrappers.redis')
    , record = require('../../metrics/recorders/cache_storage.js')('Redis')
    ;
function get_addr(obj) {
    var server = obj.host? obj.host:(obj.address?obj.address.split(':')[0]:'localhost');
    var server_port = 6379;
    if ( obj.port ) server_port = obj.port;
    else if ( obj.address ) {
        var addr = obj.address.split(':');
        if ( addr.length > 1 ) server_port = addr[1];
    }
    return {host:server, port: server_port }
}
var cmd_map = {
    __init : function (type, list) {
        for ( var i = 0; i < list.length; i++ ) this[list[i]] = type;
    },
    __name_map : function (name) {
        var result = this[name];
        return result?result: 'unknown';
    }
};

var get_lst = ["bitcount", "bitpos", "get", "strlen", "exists", "getbit", "getrange", "substr", "mget", "rpop", "lpop", "brpop", "blpop",
    "llen", "lindex", "lrange", "sismember", "scard", "spop", "srandmember", "sinter", "sunion", "sdiff", "smembers", "zrange", "zrangebylex",
    "zrangebyscore", "zrevrangebyscore", "zcount", "zrevrange", "zcard", "zcount", "zscore", "zlexcount", "zrank", "zrevrank", "hget", "hmget",
    "hlen", "hkeys", "hvals", "hgetall", "hexists", "randomkey", "select", "keys", "dbsize", "type", "info", "ttl", "pttl", "subscribe",
    "psubscribe", "object", "evalsha", "scan", "sscan", "hscan", "zscan", "time", "slowlog", "script exists", "pubsub", "pfcount"];
var set_lst = ["bitop", "set", "setbit", "setnx", "setex", "psetex", "append", "brpoplpush", "rpoplpush", "setrange", "incr", "decr", "rpush",
    "lpush", "rpushx", "lpushx", "linsert", "lset", "sadd", "smove", "sinterstore", "sdiffstore", "sunionstore", "zadd", "zincrby", "zunionstore",
    "zinterstore", "hset", "hsetnx", "hmset", "hincrby", "hincrbyfloat", "incrby", "incrbyfloat", "decrby", "getset", "mset", "msetnx", "move",
    "rename", "renamenx", "persist", "unsubscribe", "punsubscribe", "publish", "watch", "unwatch", "script load", "pfmerge", "pfadd"];
var sort_lst = ["sort", "restore", "migrate", "dump"];
var del_lst = ["del", "ltrim", "lrem", "srem", "zrem", "zremrangebyscore", "zremrangebyrank", "zremrangebylex", "hdel", "expire", "expireat",
    "pexpire", "pexpireat", "flushdb", "flushall", "script flush"];
var ctl_lst = ["auth", "ping", "echo", "save", "bgsave", "bgrewriteaof", "shutdown", "lastsave", "multi", "exec", "discard", "sync", "monitor",
    "slaveof", "debug", "debug object", "debug segfault", "config", "cluster", "client", "script kill", "quit", "client kill", "client list",
    "client getname", "client pause", "client setname", "config get", "config rewrite", "config set", "config resetstat"];
var script_lst = ["eval"];
cmd_map.__init('get', get_lst);
cmd_map.__init('set', set_lst);
cmd_map.__init('sort', sort_lst);
cmd_map.__init('del', del_lst);
cmd_map.__init('ctl', ctl_lst);
cmd_map.__init('script', script_lst);

module.exports = function initialize(agent, redis) {
    var tracer = agent.tracer;
    if ( ! (redis && redis.RedisClient && redis.RedisClient.prototype) ) return;
    shimmer.wrapMethod(redis.RedisClient.prototype, 'redis.RedisClient.prototype', 'send_command', function wrapper(send_command) {
            return tracer.segmentProxy(function wrapped() {
                if ( ! agent.config.enabled ) return send_command.apply(this, arguments);

                if (!tracer.getAction() || arguments.length < 1) return send_command.apply(this, arguments);
                var action = tracer.getAction();
                var args   = tracer.slice(arguments);
                var addr   = get_addr(this);
                var name   = 'Redis/' + addr.host + ':' + addr.port + '/' + cmd_map.__name_map(args[0]);

                var segment_info = {
                    metric_name : name,
                    call_url: "",
                    call_count:1,
                    class_name:"redis.RedisClient",
                    method_name: 'send_command.' + args[0],
                    params : {}
                }
                var segment     = tracer.addSegment(segment_info, record)
                    , position    = args.length - 1
                    , keys        = args[1]
                    , last        = args[position]
                    ;

                if (agent.config.capture_params && keys && typeof keys !== 'function' && agent.config.ignored_params.indexOf('key') === -1) {
                    segment.parameters.key = JSON.stringify([keys[0]]);
                }

//                segment.port = addr.port;
//                segment.host = addr.host

                function proxy(target) {
                    return function cls_finalize() {
                        segment.end();
                        return target.apply(this, arguments);
                    };
                }

                if (typeof last === 'function') {
                    args[position] = tracer.callbackProxy(proxy(last));
                }
                else if (Array.isArray(last) && typeof last[last.length - 1] === 'function') {
                    var callback = proxy(last[last.length - 1]);
                    last[last.length - 1] = tracer.callbackProxy(callback);
                }
                else {
                    args.push(function cb() { segment.end(); });
                }

                return send_command.apply(this, args);
            });
        });
};
